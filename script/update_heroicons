#!/usr/bin/env node
/* eslint-env node */
const fs = require("fs-extra");
const path = require("path");
const globby = require("globby");
const cheerio = require("cheerio");
const trimNewlines = require("trim-newlines");
const yargs = require("yargs");
const merge = require("lodash.merge");
const keywords = require("./keywords.json");

// This script generates a JSON file that contains
// information about input SVG files.
const { argv } = yargs
  .usage("Usage: $0 --output <output filepath>")
  .example("$0 --input icons/**/*.svg --output build/data.json")
  .option("input", {
    alias: "i",
    type: "array",
    describe: "Input SVG files",
    default: [
      "node_modules/heroicons/outline/*.svg",
      "node_modules/heroicons/solid/*.svg",
    ],
  })
  .option("output", {
    alias: "o",
    type: "string",
    describe:
      "Output JSON file. Defaults to stdout if no output file is provided.",
    default: "lib/heroicons_helper/data.json",
  });

const filepaths = globby.sync(argv.input);
const svgFilepaths = filepaths.filter(
  (filepath) => path.parse(filepath).ext === ".svg"
);

if (svgFilepaths.length === 0) {
  // eslint-disable-next-line no-console
  console.error(`No input SVG file(s) found in ${icon_file_path.join(", ")}`);
  process.exit(1);
}

let exitCode = 0;

const validTypes = ["solid", "outline"];
const defaultOutlineWidth = "24";
const defaultSolidWidth = "20";

const icons = svgFilepaths.map((filepath) => {
  try {
    let filename = path.parse(filepath).base;
    const type = path.parse(filepath).dir.split("/").pop();
    let widthSize;
    switch (type) {
      case "outline":
        widthSize = defaultOutlineWidth;
        break;
      case "solid":
        widthSize = defaultSolidWidth;
        break;
      default:
        throw new Error(`Unknown icon type: ${type}`);
    }

    const filenamePattern = /(.+)(?:-[0-9]{1,2})?-([0-9]{2}).svg$/;
    const filenameReplacePattern = /\.svg$/;

    if (!filenamePattern.test(filename)) {
      filename = filename.replace(filenameReplacePattern, `-${widthSize}.svg`);
    }

    const [, name, height] = filename.match(filenamePattern);

    const svg = fs.readFileSync(path.resolve(filepath), "utf8");
    const svgElement = cheerio.load(svg)("svg");
    let svgWidth = parseInt(svgElement.attr("width"));
    let svgHeight = parseInt(svgElement.attr("height"));
    const svgViewBox = svgElement.attr("viewBox");
    const svgPath = trimNewlines(svgElement.html()).trim();

    if (!svgWidth) {
      svgWidth = parseInt(widthSize);
      svgElement.attr("width", svgWidth);
    }

    if (!svgHeight) {
      svgHeight = parseInt(widthSize);
      svgElement.attr("height", svgHeight);
    }

    if (!svgViewBox) {
      throw new Error(`${filename}: Missing viewBox attribute.`);
    }

    if (svgHeight != parseInt(height)) {
      throw new Error(
        `${filename}: Height in filename (${height}) does not match height attribute of SVG (${svgHeight})`
      );
    }

    const viewBoxPattern = /0 0 ([0-9]+) ([0-9]+)/;

    if (!viewBoxPattern.test(svgViewBox)) {
      throw new Error(
        `${filename}: Invalid viewBox attribute. The viewBox attribute should be in the following format: "0 0 <width> <height>"`
      );
    }

    const [, viewBoxWidth, viewBoxHeight] = svgViewBox.match(viewBoxPattern);

    if (svgWidth !== parseInt(viewBoxWidth)) {
      throw new Error(
        `${filename}: width attribute and viewBox width do not match.`
      );
    }

    if (svgHeight !== parseInt(viewBoxHeight)) {
      throw new Error(
        `${filename}: height attribute and viewBox height do not match.`
      );
    }

    return {
      name,
      keywords: keywords[name] || [],
      type: type,
      width: svgWidth,
      height: svgHeight,
      path: svgPath,
    };
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error(error);
    // Instead of exiting immediately, we set exitCode to 1 and continue
    // iterating through the rest of the SVGs. This allows us to identify all
    // the SVGs that have errors, not just the first one. An exit code of 1
    // indicates that an error occurred.
    // Reference: https://nodejs.org/api/process.html#process_exit_codes
    exitCode = 1;
    return null;
  }
});

// Exit early if any errors occurred.
if (exitCode !== 0) {
  process.exit(exitCode);
}

const iconsByName = icons.reduce(
  (acc, icon) =>
    merge(acc, {
      [icon.name]: {
        name: icon.name,
        keywords: icon.keywords,
        variants: {
          [icon.type]: {
            width: icon.width,
            height: icon.height,
            path: icon.path,
          },
        },
      },
    }),
  {}
);

fs.outputJsonSync(path.resolve(argv.output), iconsByName);
