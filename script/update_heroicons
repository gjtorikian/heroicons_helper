#!/usr/bin/env node
/* eslint-env node */
import fs from "fs-extra";
import path from "path";
import { globbySync } from "globby";
import { load as cheerioLoad } from "cheerio";
import { trimNewlines } from "trim-newlines";
import yargs from "yargs";
import merge from "lodash.merge";
import keywords from "./keywords.json" assert { type: "json" };

// This script generates a JSON file that contains
// information about input SVG files.
const { argv } = yargs()
  .usage("Usage: $0 --output <output filepath>")
  .example("$0 --input icons/**/*.svg --output build/data.json")
  .option("input", {
    alias: "i",
    type: "array",
    describe: "Input SVG files",
    default: [
      "node_modules/heroicons/16/solid/*.svg",
      "node_modules/heroicons/20/solid/*.svg",
      "node_modules/heroicons/24/outline/*.svg",
      "node_modules/heroicons/24/solid/*.svg",
    ],
  })
  .option("output", {
    alias: "o",
    type: "string",
    describe:
      "Output JSON file. Defaults to stdout if no output file is provided.",
    default: "lib/heroicons_helper/data.json",
  });

const filepaths = globbySync(argv.input);
const svgFilepaths = filepaths.filter(
  (filepath) => path.parse(filepath).ext === ".svg"
);

if (svgFilepaths.length === 0) {
  // eslint-disable-next-line no-console
  console.error(`No input SVG file(s) found in ${filepaths.join(", ")}`);
  process.exit(1);
}

let exitCode = 0;

const validTypes = ["micro", "mini", "outline", "solid"];
const defaultOutlineWidth = parseInt("24");
const defaultSolidWidth = parseInt("24");
const defaultMiniWidth = parseInt("20");
const defaultMicroWidth = parseInt("16");

function omit(obj, key) {
  const { [key]: ignore, ...rest } = obj;
  return rest;
}

const icons = svgFilepaths.map((filepath) => {
  try {
    const filename = path.parse(filepath).base;
    let splitDir = path.parse(filepath).dir.split("/");
    let variant = splitDir.pop();
    const size = splitDir.pop();

    const svg = fs.readFileSync(path.resolve(filepath), "utf8");
    const svgElement = cheerioLoad(svg)("svg");
    let svgAttributes = omit(svgElement[0].attribs, "aria-hidden");
    let svgWidth = parseInt(svgElement.attr("width")) || parseInt(size);
    let svgHeight = parseInt(svgElement.attr("height")) || parseInt(size);
    const svgViewBox = svgElement.attr("viewBox");
    const svgInner = trimNewlines(svgElement.html()).trim();

    if (!svgWidth) {
      svgWidth = parseInt(widthSize);
      svgElement.attr("width", svgWidth);
    }

    if (!svgHeight) {
      svgHeight = parseInt(widthSize);
      svgElement.attr("height", svgHeight);
    }

    if (!svgViewBox) {
      throw new Error(`${filename}: Missing viewBox attribute.`);
    }

    const viewBoxPattern = /0 0 ([0-9]+) ([0-9]+)/;

    if (!viewBoxPattern.test(svgViewBox)) {
      throw new Error(
        `${filename}: Invalid viewBox attribute. The viewBox attribute should be in the following format: "0 0 <width> <height>"`
      );
    }

    const [, viewBoxWidth, viewBoxHeight] = svgViewBox.match(viewBoxPattern);

    if (svgWidth !== parseInt(viewBoxWidth)) {
      throw new Error(
        `${filename}: width attribute and viewBox width do not match.`
      );
    }

    if (svgHeight !== parseInt(viewBoxHeight)) {
      throw new Error(
        `${filename}: height attribute and viewBox height do not match.`
      );
    }

    if (svgWidth == defaultMicroWidth && variant == "solid") {
      variant = "micro";
    } else if (svgWidth == defaultMiniWidth && variant == "solid") {
      variant = "mini";
    }
    const name = filename.slice(0, -4);

    return {
      name,
      keywords: keywords[name] || [],
      variant: variant,
      width: svgWidth,
      height: svgHeight,
      attributes: svgAttributes,
      inner: svgInner,
    };
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error(error);
    // Instead of exiting immediately, we set exitCode to 1 and continue
    // iterating through the rest of the SVGs. This allows us to identify all
    // the SVGs that have errors, not just the first one. An exit code of 1
    // indicates that an error occurred.
    // Reference: https://nodejs.org/api/process.html#process_exit_codes
    exitCode = 1;
    return null;
  }
});

// Exit early if any errors occurred.
if (exitCode !== 0) {
  process.exit(exitCode);
}

const iconsByName = icons.reduce(
  (acc, icon) =>
    merge(acc, {
      [icon.name]: {
        name: icon.name,
        keywords: icon.keywords,
        variants: {
          [icon.variant]: {
            attributes: icon.attributes,
            width: icon.width,
            height: icon.height,
            inner: icon.inner,
          },
        },
      },
    }),
  {}
);

fs.outputJsonSync(path.resolve(argv.output), iconsByName);
